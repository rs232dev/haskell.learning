

** ********************************************************************************************** **
**                                     Table of contents                                          **
** ********************************************************************************************** **

   1) Create VsCode project
   2) Show   VsCode preferences
   3) Set Vscode terminal
   4) Haskell Main
   5) Haskell Comments
   6) Cap_3_4 Variables_and_Functions
   7) Cap_5 Type Basics
   8) Cap_6 List and Tuples
   9) Cap_7 Type Basics II
  10) Cap_8 Building vocabulary
  11) 



-- ---------------------------------------------------------------------------------------------- --
--  1) Create VsCode project                                                                         -- 
-- ---------------------------------------------------------------------------------------------- --

host@hskuser:~/dev/vscode.wks/haskell.learning/haskell.wikibooks$ stack new HaskellBasic new-template
Downloading template "new-template" to create project "HaskellBasic" in HaskellBasic/ ...

The following parameters were needed by the template but not provided: author-name
You can provide them in /home/corrado/.stack/config.yaml, like this:
templates:
  params:
    author-name: value
Or you can pass each one as parameters like this:
stack new HaskellBasic new-template -p "author-name:value"


The following parameters were needed by the template but not provided: author-email, author-name, category, copyright, github-username
You can provide them in /home/corrado/.stack/config.yaml, like this:
templates:
  params:
    author-email: value
    author-name: value
    category: value
    copyright: value
    github-username: value
Or you can pass each one as parameters like this:
stack new HaskellBasic new-template -p "author-email:value" -p "author-name:value" -p "category:value" -p "copyright:value" -p "github-username:value"

Looking for .cabal or package.yaml files to use to init the project.
Using cabal packages:

- HaskellBasic/

Selecting the best among 15 snapshots...

Downloaded lts-13.18 build plan.    
Didn't see Chart-1.9.1@sha256:cc50e1e65738ab2d6c30ae9e3f138962f87667d81f7860a0deeca9053f6d21ed,2857 in your package indices.
Updating and trying again.
Selected mirror https://s3.amazonaws.com/hackage.fpcomplete.com/                                 
Downloading timestamp                                                                            
Downloading snapshot                                                                             
Updating index                                                                                   
Updated package index downloaded                                                                 
Update complete                                                                                  
Populated index cache.    
* Matches lts-13.18

Selected resolver: lts-13.18
Initialising configuration using resolver: lts-13.18
Total number of user packages considered: 1
Writing configuration to file: HaskellBasic/stack.yaml
All done.


-- ---------------------------------------------------------------------------------------------- --
-- 2) Show   VsCode preferences                                                                   -- 
-- ---------------------------------------------------------------------------------------------- --

VsCode Preferences:
Creating User and Workspace Settings
To open your user and workspace settings, use the following VS Code menu command:

    On Windows/Linux - File > Preferences > Settings
    On macOS - Code > Preferences > Settings

You can also open the Settings editor from the Command Palette (Ctrl+Shift+P) with Preferences: Open Settings or use the keyboard shortcut (Ctrl+,).


-- ---------------------------------------------------------------------------------------------- --
--  3) Set Vscode terminal                                                                        -- 
-- ---------------------------------------------------------------------------------------------- --

export LC_ALL=en_US.UTF-8
ghci -isrc:app app/Main.hs
Prelude> :set prompt "\x03BB:"


-- ---------------------------------------------------------------------------------------------- --
-- 4) Haskell Main                                                                                -- 
-- ---------------------------------------------------------------------------------------------- --

module Main where

import Lib
import Cap_3.Variables_and_Functions

main :: IO ()
main = do

    putStrLn "haskell basic course ";    


-- ---------------------------------------------------------------------------------------------- --
-- 5) Haskell Comments                                                                            -- 
-- ---------------------------------------------------------------------------------------------- --    

-- single line comment
{--
     multi lines comment
--}

-- ---------------------------------------------------------------------------------------------- --
--  6) Cap_3_4 Variables_and_Functions                                                            -- 
-- ---------------------------------------------------------------------------------------------- --    

    - Local definition
    - Prefix Infix operators
    - Boolean operations
    - Guards

-- ---------------------------------------------------------------------------------------------- --
--  7) Cap_5 Type Basics                                                                          -- 
-- ---------------------------------------------------------------------------------------------- --    

    - Haskell is STRONGLY TYPED

-- ---------------------------------------------------------------------------------------------- --
--  8) Cap_6 List and Tuples                                                                      -- 
-- ---------------------------------------------------------------------------------------------- --    
    - List
    - Building a List
    - List of Lists
    - Tuples
    - Retrieve values
    - Tuples within Tuples
    - Polymorphic types

-- ---------------------------------------------------------------------------------------------- --
--  9) Cap_7 Type Basics II                                                                       -- 
-- ---------------------------------------------------------------------------------------------- --        
    - The Num class

-- ---------------------------------------------------------------------------------------------- --
--  10) Cap_8 Building vocabulary                                                                 -- 
-- ---------------------------------------------------------------------------------------------- --        
    - Function Composition:

        Function Composition is a really simply concept.
        It just means applying one function to a value and then applying another function to the
        result.

    - Prelude and hierarchical libraries:

        Prelude is the core library loaded by default in every Haskell program.

    Alongside with Prelude, there are the hierarchical libraries, which provide a much wider
    range of functionality.
    Although they are provided by default with GHC, they are not loaded automatically like
    Prelude.
    Rather they are distributed as modules, which must be imported into your program.

    ex.

    import Data.List


    For quick GHCi tests, just enter :m +Data.List at the command line to load that module.

    Prelude> :m +Data.List
    Prelude Data.List> :t permutations    
    permutations :: [a] -> a

    Resources:

    https://en.wikibooks.org/wiki/..%2FHierarchical%20libraries
    http://www.haskell.org/onlinereport/standard-prelude.html
    http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
    http://www.haskell.org/hoogle
    https://hackage.haskell.org/
    http://www.haskell.org/cabal/users-guide/
    http://holumbus.fh-wedel.de/hayoo/hayoo.html


-- ---------------------------------------------------------------------------------------------- --
--  11) Cap_9 Next Steps                                                                          -- 
-- ---------------------------------------------------------------------------------------------- --       





